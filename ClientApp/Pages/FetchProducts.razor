@page "/fetchproducts"
@using System.Net.Http.Json
@using System.Text.Json

<h3>Product List</h3>

<ul>
   @if (products != null)
    {
        foreach (var product in products)
        {
            <li>@(product.Name ?? "(no name)") - @product.Price.ToString("C")</li>
        }
    }
    else
    {
        <li>Loading...</li>
    }
</ul>

@code {
    [Inject]
    private HttpClient? Http { get; set; }

    private Product[]? products;
    protected override async Task OnInitializedAsync()
    {
        if (Http is null)
        {
            // HttpClient not available - leave products null so UI shows Loading
            return;
        }

        try
        {
            // Call the server endpoint and deserialize JSON into Product[]
            //products = await Http.GetFromJsonAsync<Product[]>("http://localhost:5015/api/productList");

            var response = await Http.GetAsync("http://localhost:5015/api/productList");
            response.EnsureSuccessStatusCode();
            var json = await response.Content.ReadAsStringAsync();
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
            products = JsonSerializer.Deserialize<Product[]>(json, options);
        }
        catch (Exception ex)
        {
            // On error, keep products null (or you could set to empty and show an error)
            //products = Array.Empty<Product>();
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    public class Product
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public double Price { get; set; }
        public int Stock { get; set; }
    }
}